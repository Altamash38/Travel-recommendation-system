# -*- coding: utf-8 -*-
"""Travel Recommendation

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zLcfFk5l71_HxsE7u5N8V3NiYJDoA3YN

**Importing Libraries**
"""

!pip install sentence_transformers

import matplotlib.pyplot as plt
import numpy as np
from sentence_transformers import SentenceTransformer
import pandas as pd
import seaborn as sns
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.cluster import KMeans
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.decomposition import PCA
from sklearn.metrics.pairwise import cosine_similarity

plt.style.use('ggplot')
plt.rcParams['font.family'] = 'sans-serif' 
plt.rcParams['font.serif'] = 'Ubuntu' 
plt.rcParams['font.monospace'] = 'Ubuntu Mono' 
plt.rcParams['font.size'] = 14 
plt.rcParams['axes.labelsize'] = 12 
plt.rcParams['axes.labelweight'] = 'bold' 
plt.rcParams['axes.titlesize'] = 12 
plt.rcParams['xtick.labelsize'] = 12 
plt.rcParams['ytick.labelsize'] = 12 
plt.rcParams['legend.fontsize'] = 12 
plt.rcParams['figure.titlesize'] = 12 
plt.rcParams['image.cmap'] = 'jet' 
plt.rcParams['image.interpolation'] = 'none' 
plt.rcParams['figure.figsize'] = (12, 10) 
plt.rcParams['axes.grid']=True
plt.rcParams['lines.linewidth'] = 2 
plt.rcParams['lines.markersize'] = 8
colors = ['xkcd:pale orange', 'xkcd:sea blue', 'xkcd:pale red', 'xkcd:sage green', 'xkcd:terra cotta', 'xkcd:dull purple', 'xkcd:teal', 'xkcd: goldenrod', 'xkcd:cadet blue',
'xkcd:scarlet']

data=pd.read_csv('/content/drive/MyDrive/Data/Indonesia Tourism.csv')

data.head()

data.info()

del data["Unnamed: 11"]

del data["Unnamed: 12"]

del data["Coordinate"]

del data ["Time_Minutes"]

del data["Place_Id"]

data.head()

data.isnull().sum()

data.describe()

data.corr()

x=np.array(data.Description)

text_data = x
model = SentenceTransformer('distilbert-base-nli-mean-tokens')
embeddings = model.encode(text_data, show_progress_bar=True)

data.head()

embed_data = embeddings

x = np.array(embed_data)
n_comp = 5
pca = PCA(n_components=n_comp)
pca.fit(x)
pca_data = pd.DataFrame(pca.transform(x))
pca_data.head()

sns.pairplot(pca_data)

cos_sim_data = pd.DataFrame(cosine_similarity(x))
def give_recommendations(index,print_recommendation = False,print_recommendation_plots= False,print_category =False):
  index_recomm =cos_sim_data.loc[index].sort_values(ascending=False).index.tolist()[1:6]
  place_recomm =  data['Place_Name'].loc[index_recomm].values
  result = {'Place':place_recomm,'Index':index_recomm}
  if print_recommendation==True:
    print('The visited place is this one: %s \n'%(data['Place_Name'].loc[index]))
    k=1
    for place in place_recomm:
      print('The number %i recommended place is this one: %s \n'%(k,place))
  if print_recommendation_plots==True:
    print('The plot of the visited place is this one:\n %s \n'%(data['Description'].loc[index]))
    k=1
    for q in range(len(place_recomm)):
      plot_q = data['Description'].loc[index_recomm[q]]
      print('The plot of the number %i recommended place is this one:\n %s \n'%(k,plot_q))
      k=k+1
  if print_category==True:
    print('The category of the visited place is this one:\n %s \n'%(data['Category'].loc[index]))
    k=1
    for q in range(len(place_recomm)):
      plot_q = data['Category'].loc[index_recomm[q]]
      print('The plot of the number %i recommended place is this one:\n %s \n'%(k,plot_q))
      k=k+1
  return result

plt.figure(figsize=(30,20))
for q in range(1,5):
  plt.subplot(2,2,q)
  index = np.random.choice(np.arange(0,len(x)))
  to_plot_data = cos_sim_data.drop(index,axis=1)
  plt.plot(to_plot_data.loc[index],'.',color='firebrick')
  recomm_index = give_recommendations(index)
  x = recomm_index['Index']
  y = cos_sim_data.loc[index][x].tolist()
  m = recomm_index['Place']
  plt.plot(x,y,'.',color='navy',label='Recommended Places')
  plt.title('Places visited: '+data['Place_Name'].loc[index])
  plt.xlabel('places Index')
  k=0
  for x_i in x:
    plt.annotate('%s'%(m[k]),(x_i,y[k]),fontsize=10)
    k=k+1

  plt.ylabel('Cosine Similarity')
  plt.ylim(0,1)

give_recommendations(2,True)

give_recommendations(2,True,True)

give_recommendations(2,False,False,True)

recomm_list = []
for i in range(len(x)):
  recomm_i = give_recommendations(i)
  recomm_list.append(recomm_i['Place'])
recomm_data = pd.DataFrame(recomm_list,columns=['First Recommendation','Second Recommendation','Third Recommendation','Fourth Recommendation','Fifth Recommendation'])
recomm_data['Visited Place'] = data['Place_Name']
recomm_data = recomm_data[['Visited Place','First Recommendation','Second Recommendation','Third Recommendation','Fourth Recommendation','Fifth Recommendation']]

recomm_data.sample(frac=1).head()